#!/usr/bin/env python3
import os
import socketserver
import subprocess
import socket
from syslog import syslog
def change_usb_state(vm, action, device):
    xml_path = '/tmp/device-{}.xml'.format(device)
    if not os.path.exists(xml_path):
        with open(xml_path, 'w+') as fp:
            fp.write("""
                <hostdev mode='subsystem' type='usb'>
                    <source>
                        <vendor id='0x{}'/>
                        <product id='0x{}'/>
                    </source>
                </hostdev>
            """.format(*device.split(':')))
    return subprocess.call(['virsh', action+'-device', vm, xml_path]) == 0


class PCIHandler(socketserver.StreamRequestHandler):
    def handle(self):
        for line in self.rfile:
            syslog("got new line")
            action_str = line.strip().decode("utf-8")
            vm_name, action, *devices = action_str.split(' ')
            if len(action) >= 3 and action in ('attach', 'detach'):
                for device in devices:
                    if change_usb_state(vm_name, action, device):
                        syslog("[VMusb] {} {}ed device {}".format(vm_name, action, device))
                    else:
                        syslog("[VMusb] {} {}ing device {} failed".format(vm_name, action, device))
            else:
                syslog("[VMusb] invalid action: {}".format(action_str))


class TCPServerPassive(socketserver.TCPServer):
    def __init__(self, RequestHandlerClass):
        super().__init__(None, RequestHandlerClass, bind_and_activate=False)
        self.socket.close()
        self.socket = socket.fromfd(3, socket.AF_INET, socket.SOCK_STREAM)


class ThreadedTCPServer(socketserver.ThreadingMixIn, TCPServerPassive):
    pass

try:
    ThreadedTCPServer(PCIHandler).serve_forever()
except OSError:
    syslog("[VMusb] failed to start because it should be started by systemd")
    exit(-1)
